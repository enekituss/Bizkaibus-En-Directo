<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bizkaibus en tiempo real</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #e8f5e9;
            color: #1b5e20;
        }
        #map {
            height: 400px;
            width: 90%;
            margin: auto;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        #searchContainer {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 5px;
            margin: 10px 0;
            background: #a5d6a7;
            padding: 10px;
            border-radius: 10px;
        }
        #searchInput {
            padding: 8px;
            border: 2px solid #388e3c;
            border-radius: 5px;
            width: 200px;
        }
        .button {
            padding: 8px 15px;
            background: #2e7d32;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .button:hover {
            background: #1b5e20;
        }
        #searchResults {
            margin-top: 20px;
            display: none;
        }
        #searchResults ul {
            list-style-type: none;
            padding: 0;
        }
        #searchResults li {
            margin: 5px 0;
        }
        /* Nuevos estilos para los botones de navegaci√≥n */
        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            padding: 0 20px;
        }

        button {
            padding: 10px 20px;
            background-color: #388e3c;
            color: white;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s;
        }

        button:hover {
            background-color: #2e7d32;
            transform: scale(1.1);
        }

        button:disabled {
            background-color: #c8e6c9;
            cursor: not-allowed;
        }

        button:disabled:hover {
            background-color: #c8e6c9;
        }
    </style>
</head>
<body>
    <h2>Bizkaibus en tiempo real üöç</h2>

    <!-- Cuadro de b√∫squeda -->
    <div id="searchContainer">
        <input type="text" id="searchInput" placeholder="Buscar por Bus ID o L√≠nea" oninput="searchStops()" />
        <button class="button" onclick="searchBus()">Buscar</button>
    </div>

    <div id="searchResults">
        <ul id="resultsList"></ul>
        <div class="navigation-buttons">
            <button id="prevBtn" onclick="navigateResults('prev')" disabled>&lt; Anterior</button>
            <button id="nextBtn" onclick="navigateResults('next')" disabled>Siguiente &gt;</button>
        </div>
    </div>

    <div id="map"></div>

    <script>
        var map = L.map('map').setView([43.28, -2.98], 12);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors'
        }).addTo(map);

        var busMarkers = {};
        var stopNames = {};
        var buses = [];
        var searchResults = [];
        var currentIndex = -1;

        async function loadStopData() {
            let url = "https://raw.githubusercontent.com/enekituss/bizkaibus-data/main/lista%20paradas%20ID%20chatgpt.txt";

            try {
                let response = await fetch(url);
                let text = await response.text();

                let lines = text.split("\n");
                for (let line of lines) {
                    let parts = line.split(" - ");
                    if (parts.length === 2) {
                        let stopId = parts[0].trim();
                        let stopName = parts[1].trim();
                        stopNames[stopId] = stopName;
                    }
                }
                console.log("Paradas cargadas:", stopNames);
            } catch (error) {
                console.error("Error al cargar las paradas:", error);
            }
        }

        async function updateBuses() {
            try {
                let response = await fetch('https://api.allorigins.win/raw?url=https://ctb-siri.s3.eu-south-2.amazonaws.com/bizkaibus-vehicle-positions.xml');
                let text = await response.text();
                let parser = new DOMParser();
                let xmlDoc = parser.parseFromString(text, 'text/xml');
                let vehicles = xmlDoc.getElementsByTagName("VehicleActivity");

                buses = []; // Reset buses data

                for (let vehicle of vehicles) {
                    let id = vehicle.getElementsByTagName("VehicleRef")[0].textContent;
                    let location = vehicle.getElementsByTagName("VehicleLocation")[0];
                    let lat = parseFloat(location.getElementsByTagName("Latitude")[0].textContent);
                    let lon = parseFloat(location.getElementsByTagName("Longitude")[0].textContent);
                    let stopRef = vehicle.getElementsByTagName("StopPointRef")[0]?.textContent || 'Desconocida';
                    let stopName = stopNames[stopRef] || "Parada desconocida";
                    let journeyRef = vehicle.getElementsByTagName("VehicleJourneyRef")[0]?.textContent || '';
                    let lineNumber = journeyRef.match(/A(\d{4})/) ? journeyRef.match(/A(\d{4})/)[1] : "L√≠nea desconocida";

                    buses.push({ id, lat, lon, stopRef, stopName, lineNumber });
                    let popupContent = 
                        `üöç <b>N√∫mero de Bus:</b> ${id}<br>
                        üìç <b>L√≠nea:</b> ${lineNumber}<br>
                        üõë <b>Pr√≥xima parada:</b> ${stopName}<br>
                        üî¢ <b>Parada ID:</b> ${stopRef}`;

                    if (busMarkers[id]) {
                        busMarkers[id].setLatLng([lat, lon]).setPopupContent(popupContent);
                    } else {
                        busMarkers[id] = L.marker([lat, lon]).addTo(map).bindPopup(popupContent);
                    }
                }
            } catch (error) {
                console.error("Error al actualizar los buses:", error);
            }
        }

        function searchStops() {
            let query = document.getElementById('searchInput').value.toLowerCase();
            searchResults = [];

            for (let bus of buses) {
                if (bus.id.toLowerCase().includes(query) || bus.lineNumber.toLowerCase().includes(query)) {
                    searchResults.push(bus);
                }
            }

            displayResults();
        }

        function displayResults() {
            let resultsList = document.getElementById('resultsList');
            resultsList.innerHTML = '';

            if (searchResults.length > 0) {
                document.getElementById('searchResults').style.display = 'block';
                searchResults.forEach((result, index) => {
                    let li = document.createElement('li');
                    li.textContent = `Bus ${result.id} - L√≠nea ${result.lineNumber}`;
                    li.onclick = () => showBusOnMap(result);
                    resultsList.appendChild(li);
                });

                currentIndex = -1;
                toggleNavigationButtons();
            } else {
                document.getElementById('searchResults').style.display = 'none';
            }
        }

        function showBusOnMap(result) {
            let bus = result;
            map.setView([bus.lat, bus.lon], 14);

            L.popup()
                .setLatLng([bus.lat, bus.lon])
                .setContent(`üöç <b>N√∫mero de Bus:</b> ${bus.id}<br>üìç <b>L√≠nea:</b> ${bus.lineNumber}<br>üõë <b>Pr√≥xima parada:</b> ${bus.stopName}<br>üî¢ <b>Parada ID:</b> ${bus.stopRef}`)
                .openOn(map);
        }

        function navigateResults(direction) {
            if (direction === 'next' && currentIndex < searchResults.length - 1) {
                currentIndex++;
            } else if (direction === 'prev' && currentIndex > 0) {
                currentIndex--;
            }

            let result = searchResults[currentIndex];
            showBusOnMap(result);
            toggleNavigationButtons();
        }

        function toggleNavigationButtons() {
            document.getElementById('prevBtn').disabled = currentIndex <= 0;
            document.getElementById('nextBtn').disabled = currentIndex >= searchResults.length - 1;
        }

        loadStopData().then(updateBuses);
        setInterval(updateBuses, 5000);
    </script>
</body>
</html>
